generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  avatar      String?
  status      String   @default("offline")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownedServers    Server[]        @relation("ServerOwner")
  serverMembers   ServerMember[]
  messages        Message[]
  uploadedFiles   File[]          @relation("FileUploader")

  @@map("users")
}

model Server {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner     User           @relation("ServerOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members   ServerMember[]
  channels  Channel[]

  @@map("servers")
}

model ServerMember {
  id       String @id @default(cuid())
  role     String @default("member") // member, admin, owner
  joinedAt DateTime @default(now())
  userId   String
  serverId String

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([userId, serverId])
  @@map("server_members")
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("text") // text, voice
  position    Int      @default(0)
  serverId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("channels")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // text, image, file
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  edited    Boolean  @default(false)
  authorId  String
  channelId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploaderId   String
  createdAt    DateTime @default(now())

  // Relations
  uploader User @relation("FileUploader", fields: [uploaderId], references: [id], onDelete: Cascade)

  @@map("files")
}
